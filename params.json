{"name":"Knockknock","tagline":"An alternative smartphone interface","body":"By Geir Turtum and Torgeir Lien\r\n\r\n### Idea\r\nWe want to make an alternate interface for controlling smartphones. It's annoying having to take the phone out of the pocket for every little thing. We want to make it possible to perform simple predetermined actions on the phone by simply knocking on the phone while it's in the pocket. \r\n\r\nUse-cases where it's nice to not have to take out the phone:\r\n* While in meeting: silencing a ringing phone or sending a predetermined message  \r\n* Start recording sound\r\n* Control music apps\r\n* Control a stop watch\r\n* For any use when it's inappropriate to be using the phone\r\n\r\n### Goal\r\nAt the end of this project we want an interface which is reliable enough for everyday use and we will have two example applications using this interface. The project must be done and ready for presentation by March 16. when at least one example app will be presented to our class.\r\n\r\nThe first app will be a distance measuring app for golf, two knocks for marking the start GPS location for where the shot was taken from, and then two knocks for marking where the ball landed. The app will then read back to the user the distance the ball has traveled using text to speach.\r\n\r\nThe second app will be an app for controlling media-playback in smartphones. It will be possible to stop, pause or go to next song by knocking on the phone. Should ideally work for most music playing applications like the built in player, Spotify, Pandora etc.\r\n\r\n### Main technical challenges\r\n\r\n* Properly detecting when the user is knocking on the phone\r\n* Giving feedback to the user\r\n* Making this happen while the phone is in a locked state\r\n* Creating an interface which is reliable enough\r\n\r\n### Solutions to some of the technical challenges\r\n* Fusing accelerometer and sound recording to detect the signature of a knock to the side of the phone (maybe also gyroscope)\r\n* Launching the app as a service to make it run in background and during lock state\r\n* Feedback via text-to-speech, vibration or simple sounds \r\n\r\n\r\n### Progress\r\nFebruary 7 - The project has been presented to the class and our professor has accepted it.\r\n\r\nFebruary 8 - We have determined some of the most important challenges and modules in our project and divided them between us. \r\n\r\nFebruary 9 - Programmed several simple apps for testing and getting used to: accelerometer, microphone, vibration motor, text-to-speech, controlling media apps etc. Started looking at what kind of data we can get from the accelerometer and microphone and ways to analyze these.\r\n\r\nFebruary 10 - We have now implemented two prototype apps for the alternative interfaces. One the measures the sound amplitude to detect knocks on the phone, and one which detects spikes in accelerometer data due to movement in the z-axis of the phone. \r\n\r\nDetecting knock-spikes is easy enough, the difficult part is removing all the noise so we don't get false positives. It seems very difficult to detect actual -single- knocks vs a wide range of other noise. However, we found that when we look for a pattern like knock-wait-knock, both prototypes are actually already pretty robust. Both apps are now separately able to reliable detect knocks without triggering from other things while the phone is in the pocket etc. The accelerometer app is now simply using a absolute high-pass filter with a simple event-timer to detect successive knocks. The sound measure app returns the highest measured noise in some interval (a knock produces a saturation) and then waits some time for another knock. These app have also been used to simply vibrate on event, as well as pause and resume multimedia-apps on our phones. \r\n\r\nWe are now considering adding a state machine for detecting of knock-patterns, so that we can easily add more complex patterns later. We also want to optimize each of the apps and make them even more robust, or finding better ways to analyze data before we merge them together. When we are happy with the interface itself we will move over to making example apps and maybe even putting them on Google Play if they are any good!\r\n\r\nFebruary 14 - With both the accelerometer and volume \"knock\" sensing done we have now combined the two sensors to make the app more robust. Now each of the sensors has to agree that a knock has happened before a knock event is triggered. See below for the state machine that combines the two sensors to detect a knock.\r\n\r\n<img src=\"https://docs.google.com/drawings/d/1CDFVOHkJ5Sp0i3s3sHYXlD1ZRhRj7QrtispWqAB6eH0/pub?w=537&amp;h=624\">\r\n\r\nFebruary 18 - Created the state machine that is responsible for detecting knocking patterns. Now we are able to start and stop the built in music player by knocking twice on our pocket. Next step is to make the knocking interface more robust and start working on the distance measuring app. \r\n\r\nFebruary 28 - Distance measuring using GPS is up and running. Next task is to work on design and adding the KnockKnock interface to the app.\r\n\r\nMarch 3 - The music controlling app is now able to pause/play and switch to next song seamlessly for some mainstream media apps. Tested and working for Android Media Player and Pandora. NOT working for: Last.fm, but then again not even headset buttons work for that app. \r\n\r\nContact us: Torgeir Lien (samma@github / sloooth@gmail.com) and Geir Turtum (geirivtu@github)\r\n\r\n#### Link to presentation slides:\r\nhttps://docs.google.com/presentation/d/1M8Bzie2UMnzLqXpyUimqu77IS7XygZtEv5jetCrQHeQ/edit?usp=sharing","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}